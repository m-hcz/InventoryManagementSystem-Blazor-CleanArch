@page "/editproduct/{prodId:int}"
@inject IViewProductByIdUseCase _ViewProductByIdUseCase
@inject IEditProductUseCase _EditProductUseCase
@inject NavigationManager _NavigationManager

@rendermode InteractiveServer

<PageTitle>Edit Product</PageTitle>

<h3>Edit Product</h3>
<br />

@if (Product != null)
{
	<EditForm Model="Product" OnValidSubmit="Update">
		<DataAnnotationsValidator></DataAnnotationsValidator>

		<div class="form-group">
			<label for="name">Name</label>
			<InputText id="name" @bind-Value="Product.Name" class="form-control"></InputText>
			<ValidationMessage For="()=> Product.Name"></ValidationMessage>
		</div>
		<div class="form-group">
			<label for="quantity">Quantity</label>
			<InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control"></InputNumber>
			<ValidationMessage For="()=> Product.Quantity"></ValidationMessage>
		</div>
		<div class="form-group">
			<label for="price">Price</label>
			<InputNumber id="price" @bind-Value="Product.Price" class="form-control"></InputNumber>
			<ValidationMessage For="()=> Product.Price"></ValidationMessage>
		</div>
		<div class="form-group">
			<label for="inventories">Inventories</label>
			<ValidationMessage For="()=> Product.ProductInventories"></ValidationMessage>
			<ProductInventoriesComponent Product="Product" />
		</div>
		<br />

		<button type="submit" class="btn btn-primary">Save</button>
		&nbsp;
		<a href="/products" class="btn btn-outline-primary">Cancel</a>
	</EditForm>
}

@code {
	[Parameter]
	public int ProdId { get; set; }

	private Product? Product;

	protected override async Task OnParametersSetAsync()
	{
		Product = await _ViewProductByIdUseCase.ExecuteAsync(ProdId);
	}

	private async Task Update()
	{
		if (Product is not null)
		{
			await _EditProductUseCase.ExecuteAsync(Product);

			_NavigationManager.NavigateTo("/products");
		}
	}
}
