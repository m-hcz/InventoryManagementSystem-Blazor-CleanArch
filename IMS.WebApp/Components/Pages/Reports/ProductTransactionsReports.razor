@page "/productreport"
@inject ISearchProductTransactionsUseCase _SearchProductTransactionsUseCase
@inject IJSRuntime _JSRuntime

@rendermode InteractiveServer


<h3>Product Transactions</h3>
<br />

<div id="printarea">
	<div class="row">
		<div class="col">
			<label for="inv">Product Name</label>
			<input type="text" id="inv" class="form-control" @bind-value="prodName" />
		</div>
		<div class="col">
			<label for="df">Date From</label>
			<input type="date" id="df" class="form-control" @bind-value="dateFrom" />
		</div>
		<div class="col">
			<label for="dt">Date To</label>
			<input type="date" id="dt" class="form-control" @bind-value="dateTo" />
		</div>
		<div class="col">
			<label for="at">Activity Type</label>
			<select id="at" class="form-control" @bind="activityTypeId">
				<option value="0"></option>
				<option value="1">Produce product</option>
				<option value="2">Sell product</option>
			</select>
		</div>
		<div class="col">
			<label>&nbsp;</label>
			<button type="button" class="btn btn-primary form-control" @onclick="SearchInventories">Search</button>
		</div>
		<div class="col">
			<label>&nbsp;</label>
			<button type="button" class="btn btn-primary form-control" @onclick="Print">Print</button>
		</div>
	</div>


	@if (productTransactions != null)
	{
		<table class="table">
			<thead>
				<tr>
					<th>Date</th>
					<th>Product</th>
					<th>Activity</th>
					<th>Qty Before</th>
					<th>Qty After</th>
					<th>Unit Price</th>
					<th>SO #</th>
					<th>Production #</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var it in productTransactions)
				{
					<tr>
						<td>@it.TransactionDate.ToString("MM/dd/yyyy")</td>
						<td>@it.Product?.Name</td>
						<td>@it.ActivityType</td>
						<td>@it.QuantityBefore</td>
						<td>@it.QuantityAfter</td>
						<td>@it.UnitPrice?.ToString("c")</td>
						<td>@it.SONumber</td>
						<td>@it.ProductionNumber</td>
					</tr>
				}
			</tbody>
		</table>
	}
</div>

@code {
	string prodName;
	DateTime? dateFrom;
	DateTime? dateTo;
	int? activityTypeId;

	IEnumerable<ProductTransaction>? productTransactions;

		private async Task Print()
	{
		await _JSRuntime.InvokeVoidAsync("print");
	}

	private async Task SearchInventories()
	{
		ProductTransactionType? itType = null;
		if (activityTypeId.HasValue && activityTypeId != 0) itType = (ProductTransactionType)activityTypeId;

		productTransactions = await _SearchProductTransactionsUseCase.ExecuteAsync(prodName, dateFrom, dateTo, itType);
	}
}
