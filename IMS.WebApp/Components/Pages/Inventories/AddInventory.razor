@page "/addinventory"
@attribute [Authorize(Policy = "Inventory")]

@inject IAddInventoryUseCase _AddInventoryUseCase
@inject NavigationManager _NavigationManager

<PageTitle>Add Inventory</PageTitle>

<h3>Add Inventory</h3>
<br />

<EditForm Model="inventory" FormName="formInventory" OnValidSubmit="Save">
	<DataAnnotationsValidator></DataAnnotationsValidator>

	<div class="form-group">
		<label for="name">Name</label>
		<InputText id="name" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
		<ValidationMessage For="()=> inventory.InventoryName"></ValidationMessage>
	</div>
	<div class="form-group">
		<label for="quantity">Quantity</label>
		<InputNumber id="quantity" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
		<ValidationMessage For="()=> inventory.Quantity"></ValidationMessage>
	</div>
	<div class="form-group">
		<label for="price">Price</label>
		<InputNumber id="price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
		<ValidationMessage For="()=> inventory.Price"></ValidationMessage>
	</div>
	<br />

	<button type="submit" class="btn btn-primary">Save</button>
	&nbsp;
	<a href="/inventories" class="btn btn-outline-primary">Cancel</a>
</EditForm>

@code {
	// SSR requires form name attribute

	[SupplyParameterFromForm]
	private Inventory inventory { get; set; } = new();

	private async Task Save()
	{
		await _AddInventoryUseCase.ExecuteAsync(inventory);

		_NavigationManager.NavigateTo("/inventories");
	}
}
