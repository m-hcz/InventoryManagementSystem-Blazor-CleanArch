@page "/editinventory/{invId:int}"
@attribute [Authorize(Policy = "Inventory")]

@inject IViewInventoryByIdUseCase _ViewInventoryByIdUseCase
@inject IEditInventoryUseCase _EditInventoryUseCase
@inject NavigationManager _NavigationManager

<PageTitle>Edit Inventory</PageTitle>

<h3>Edit Inventory</h3>
<br />

@if (inventory is not null)
{
	<EditForm Model="inventory" FormName="formInventory" OnValidSubmit="Update">
		<DataAnnotationsValidator></DataAnnotationsValidator>

		@* to persist id for model *@
		<InputNumber @bind-Value="inventory.InventoryId" hidden></InputNumber>


		<div class="form-group">
			<label for="name">Name</label>
			<InputText id="name" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
			<ValidationMessage For="()=> inventory.InventoryName"></ValidationMessage>
		</div>
		<div class="form-group">
			<label for="quantity">Quantity</label>
			<InputNumber id="quantity" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
			<ValidationMessage For="()=> inventory.Quantity"></ValidationMessage>
		</div>
		<div class="form-group">
			<label for="price">Price</label>
			<InputNumber id="price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
			<ValidationMessage For="()=> inventory.Price"></ValidationMessage>
		</div>
		<br />

		<button type="submit" class="btn btn-primary">Update</button>
		&nbsp;
		<a href="/inventories" class="btn btn-outline-primary">Cancel</a>
	</EditForm>
}

@code {
	[Parameter]
	public int InvId { get; set; }

	[SupplyParameterFromForm]
	private Inventory? inventory { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		// ?? beacuse it makes post request and calls this function again, I want to call is only once
		inventory ??= await _ViewInventoryByIdUseCase.ExecuteAsync(InvId);
	}

	private async Task Update()
	{
		if (inventory is not null)
		{
			await _EditInventoryUseCase.ExecuteAsync(inventory);

			_NavigationManager.NavigateTo("/inventories");
		}
	}
}
