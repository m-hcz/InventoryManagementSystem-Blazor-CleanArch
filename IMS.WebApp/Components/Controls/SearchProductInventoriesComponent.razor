@inject IViewInventoriesByNameUseCase _ViewInventoriesByNameUseCase

<div class="input-group">
	<input class="form-control" placeholder="search inventories" @bind-value=SearchFilter @bind-value:event="oninput" />
	<button type="button" class="btn btn-success input-group-text" @onclick="HandleSearch">Search</button>
</div>

@if (inventories is not null && inventories.Any())
{
	<div class="search-result">
		<ul>
			@foreach (var inv in inventories)
			{
				<li @key="inv.InventoryId" @onclick="() => { HandleSelectInventory(inv); }">@inv.InventoryName</li>
			}
		</ul>
	</div>
}

@code {
	[Parameter]
	public EventCallback<Inventory> OnInventorySelected { get; set; }

	string _SearchFilter = string.Empty;
	private string SearchFilter
	{
		get => _SearchFilter;
		set { _SearchFilter = value; HandleSearch(); }
	}

	List<Inventory> inventories = new();

	private async Task HandleSearch()
	{
		inventories = (await _ViewInventoriesByNameUseCase.ExecuteAsync(SearchFilter ?? "")).ToList();

		// because setter
		StateHasChanged();
	}

	private async Task HandleSelectInventory(Inventory inventory)
	{
		await OnInventorySelected.InvokeAsync(inventory);

		inventories.Clear();
	}
}