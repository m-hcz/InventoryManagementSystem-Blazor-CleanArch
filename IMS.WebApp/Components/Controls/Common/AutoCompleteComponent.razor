<div class="form-group">
	<label for="search">@Label</label>
	<input type="text" class="form-control" @bind-value="userInput" @bind-value:event="oninput" @onkeyup="OnKeyUp" />
</div>

@if (searchResult != null && searchResult.Any())
{
	<div class="search-result">
		<ul>
			@{
				int itemIndex = 0;

				foreach (var item in searchResult)
				{
					<li class="@(itemIndex == currentItemIndex? "selected":"")" @key="item.Id" @onclick="()=> HandleSelectItem(item)">@item.Name</li>
					itemIndex++;
				}
			}
		</ul>
	</div>
}

@code {
	[Parameter]
	public string Label { get; set; } = string.Empty;

	[Parameter]
	public EventCallback<ItemViewModel> OnItemSelected { get; set; }

	[Parameter]
	public Func<string, List<ItemViewModel>>? SearchFunction { get; set; }

	string _userInput = string.Empty;
	public string userInput
	{
		get => _userInput; set
		{
			_userInput = value;

			if (!string.IsNullOrEmpty(_userInput) && SearchFunction != null)
				searchResult = SearchFunction(_userInput);
		}
	}

	List<ItemViewModel>? searchResult;
	ItemViewModel? selectedItem;

	private void HandleSelectItem(ItemViewModel? item)
	{
		ClearHighlighting();

		if(item != null)
		{
			selectedItem = item;
			userInput = item?.Name ?? "";
			searchResult = null;

			OnItemSelected.InvokeAsync(item);
		}
	}

	private ItemViewModel? currentItem;
	private int currentItemIndex = -1;

	private void OnKeyUp(KeyboardEventArgs e)
	{
		if (searchResult != null && searchResult.Any())
		{
			if (e.Code == "ArrowDown" && currentItemIndex < searchResult.Count - 1)
			{
				currentItem = searchResult[++currentItemIndex];
			}
			else if (e.Code == "ArrowUp")
			{
				if (currentItemIndex > 0 && currentItemIndex < searchResult.Count)
					currentItem = searchResult[--currentItemIndex];
				else
				{
					currentItem = null;
					currentItemIndex = -1;
				}

			}
			else if (e.Code == "Enter" || e.Code == "NumpadEnter")
			{
				HandleSelectItem(currentItem);
			}
		}
	}

	private void ClearHighlighting()
	{
		searchResult = null;
		currentItem = null;
		currentItemIndex = -1;
	}
}
